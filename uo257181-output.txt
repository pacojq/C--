
#source "big-input.txt"

	' * struct{ int integer (offset 0), int integer (offset 0) } pair (offset 0)
	' * [2, struct{ [2, struct{ int age (offset 0) }] employees (offset 0) }] acme (offset 3)
	' * [8, [3, int]] fibonacci (offset 11)

' Invocation to the main function
call main
halt


#line	14	' * FunctionDefinition [14 : 1]: void p()
 p:

	' * Parameters
	' * Local variables
	enter	0
	ret	0, 0, 0

#line	16	' * FunctionDefinition [16 : 1]: int f(double r (offset 6), int e (offset 4))
 f:

	' * Parameters
	' * double r (offset 6)
	' * int e (offset 4)
	' * Local variables
	' * double real (offset -4)
	' * char c (offset -5)
	' * int result (offset -7)
	enter	7

#line	20	' * double real = double r * 10.0
	push	bp
	pushi	-4
	addi
	push	bp
	pushi	6
	addi
	loadf
	pushf	10.0
	mulf
	storef

#line	21	' * char c = '0'
	push	bp
	pushi	-5
	addi
	pushb	48
	storeb

#line	22	' * if (int e < 256)
	push	bp
	pushi	4
	addi
	loadi
	pushi	256
	lti
	jz	label0
	' * Body of the if branch

#line	23	' * char c = (char) int e
	push	bp
	pushi	-5
	addi
	push	bp
	pushi	4
	addi
	loadi
	i2b
	storeb

#line	24	' * int result = (int) char c
	push	bp
	pushi	-7
	addi
	push	bp
	pushi	-5
	addi
	loadb
	b2i
	storei
	jmp	label1
label0:
	' * Body of the else branch

#line	27	' * int result = (int) double real
	push	bp
	pushi	-7
	addi
	push	bp
	pushi	-4
	addi
	loadf
	f2i
	storei
label1:

#line	28	' * syntax.statements.Return@5f2050f6
	push	bp
	pushi	-7
	addi
	loadi
	ret	2, 7, 6

#line	31	' * FunctionDefinition [31 : 1]: void initialize()
 initialize:

	' * Parameters
	' * Local variables
	' * int i (offset -2)
	enter	2

#line	33	' * ArrayAccess [33 : 3] : array=[ ArrayAccess [33 : 3] : array=[ [8, [3, int]] fibonacci ] index=[ 0 ] ] index=[ 0 ] = 0
	pusha	11
	pushi	0
	pushi	6
	muli
	addi
	pushi	0
	pushi	2
	muli
	addi
	pushi	0
	storei

#line	34	' * ArrayAccess [34 : 3] : array=[ ArrayAccess [34 : 3] : array=[ [8, [3, int]] fibonacci ] index=[ 0 ] ] index=[ 1 ] = 1
	pusha	11
	pushi	0
	pushi	6
	muli
	addi
	pushi	1
	pushi	2
	muli
	addi
	pushi	1
	storei

#line	35	' * ArrayAccess [35 : 3] : array=[ ArrayAccess [35 : 3] : array=[ [8, [3, int]] fibonacci ] index=[ 0 ] ] index=[ 2 ] = 1
	pusha	11
	pushi	0
	pushi	6
	muli
	addi
	pushi	2
	pushi	2
	muli
	addi
	pushi	1
	storei

#line	36	' * int i = 1
	push	bp
	pushi	-2
	addi
	pushi	1
	storei

#line	37	' * while (int i < 8)
	jmp	label2
	push	bp
	pushi	-2
	addi
	loadi
	pushi	8
	lti
	jz	label3

#line	38	' * ArrayAccess [38 : 5] : array=[ ArrayAccess [38 : 5] : array=[ [8, [3, int]] fibonacci ] index=[ int i ] ] index=[ 0 ] = ArrayAccess [38 : 23] : array=[ ArrayAccess [38 : 23] : array=[ [8, [3, int]] fibonacci ] index=[ int i - 1 ] ] index=[ 1 ]
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	6
	muli
	addi
	pushi	0
	pushi	2
	muli
	addi
VALUE-PLACEHOLDER
	storei

#line	39	' * ArrayAccess [39 : 5] : array=[ ArrayAccess [39 : 5] : array=[ [8, [3, int]] fibonacci ] index=[ int i ] ] index=[ 1 ] = ArrayAccess [39 : 23] : array=[ ArrayAccess [39 : 23] : array=[ [8, [3, int]] fibonacci ] index=[ int i - 1 ] ] index=[ 2 ]
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	6
	muli
	addi
	pushi	1
	pushi	2
	muli
	addi
VALUE-PLACEHOLDER
	storei

#line	40	' * ArrayAccess [40 : 5] : array=[ ArrayAccess [40 : 5] : array=[ [8, [3, int]] fibonacci ] index=[ int i ] ] index=[ 2 ] = ArrayAccess [40 : 23] : array=[ ArrayAccess [40 : 23] : array=[ [8, [3, int]] fibonacci ] index=[ int i ] ] index=[ 0 ] + ArrayAccess [40 : 41] : array=[ ArrayAccess [40 : 41] : array=[ [8, [3, int]] fibonacci ] index=[ int i ] ] index=[ 1 ]
	pusha	11
	push	bp
	pushi	-2
	addi
	loadi
	pushi	6
	muli
	addi
	pushi	2
	pushi	2
	muli
	addi
VALUE-PLACEHOLDERVALUE-PLACEHOLDER	addi
	storei

#line	41	' * int i = int i + 1
	push	bp
	pushi	-2
	addi
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	label2
label3:
	ret	0, 2, 0

#line	47	' * FunctionDefinition [47 : 1]: void main()
 main:

	' * Parameters
	' * Local variables
	' * int i (offset -2)
	' * int j (offset -4)
	enter	4
VALUE-PLACEHOLDER

#line	50	' * int i = 0
	push	bp
	pushi	-2
	addi
	pushi	0
	storei

#line	51	' * struct{ int integer (offset 0), int integer (offset 0) } pair.character = '0'
ADDRESS-PLACEHOLDER
	pusha	2
	addi
	pushb	48
	storeb

#line	52	' * struct{ int integer (offset 0), int integer (offset 0) } pair.integer = (int) '0'
ADDRESS-PLACEHOLDER
	pusha	0
	addi
	pushb	48
	b2i
	storei

#line	55	' * syntax.statements.Write@3b81a1bc
	' *  Write %sf((double) int i, (int) struct{ int integer (offset 0), int integer (offset 0) } pair.character)
VALUE-PLACEHOLDER
	outi
	' *  Write %s'
'
	pushb	10
	outb
VALUE-PLACEHOLDER
	popi
VALUE-PLACEHOLDER

#line	59	' * int i = 0
	push	bp
	pushi	-2
	addi
	pushi	0
	storei

#line	60	' * while (int i < 8)
	jmp	label4
	push	bp
	pushi	-2
	addi
	loadi
	pushi	8
	lti
	jz	label5

#line	62	' * syntax.statements.Write@64616ca2
	' *  Write %s'('
	pushb	40
	outb
	' *  Write %sint i + 1
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	addi
	outi
	' *  Write %s')'
	pushb	41
	outb
	' *  Write %sArrayAccess [62 : 28] : array=[ ArrayAccess [62 : 28] : array=[ [8, [3, int]] fibonacci ] index=[ int i ] ] index=[ 0 ]
VALUE-PLACEHOLDER
	outi
	' *  Write %s'+'
	pushb	43
	outb
	' *  Write %sArrayAccess [63 : 16] : array=[ ArrayAccess [63 : 16] : array=[ [8, [3, int]] fibonacci ] index=[ int i ] ] index=[ 1 ]
VALUE-PLACEHOLDER
	outi
	' *  Write %s'='
	pushb	61
	outb
	' *  Write %sArrayAccess [64 : 11] : array=[ ArrayAccess [64 : 11] : array=[ [8, [3, int]] fibonacci ] index=[ int i ] ] index=[ 2 ]
VALUE-PLACEHOLDER
	outi
	' *  Write %s'
'
	pushb	10
	outb

#line	65	' * int i = int i + 1
	push	bp
	pushi	-2
	addi
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	label4
label5:

#line	68	' * ArrayAccess [68 : 3] : array=[ ArrayAccess [68 : 3] : array=[ [2, struct{ [2, struct{ int age (offset 0) }] employees (offset 0) }] acme ] index=[ 1 ].employees ] index=[ 1 ].age = 56
ADDRESS-PLACEHOLDER
	pusha	0
	addi
	pushi	56
	storei

#line	70	' * syntax.statements.Write@13fee20c
	' *  Write %sArrayAccess [70 : 9] : array=[ ArrayAccess [70 : 9] : array=[ [2, struct{ [2, struct{ int age (offset 0) }] employees (offset 0) }] acme ] index=[ 1 ].employees ] index=[ 1 ].age
VALUE-PLACEHOLDER
	outi
	' *  Write %s'
'
	pushb	10
	outb

#line	71	' * int i = 0
	push	bp
	pushi	-2
	addi
	pushi	0
	storei

#line	72	' * while (int i < 2)
	jmp	label6
	push	bp
	pushi	-2
	addi
	loadi
	pushi	2
	lti
	jz	label7

#line	73	' * int j = 0
	push	bp
	pushi	-4
	addi
	pushi	0
	storei

#line	74	' * while (int j < 2)
	jmp	label8
	push	bp
	pushi	-4
	addi
	loadi
	pushi	2
	lti
	jz	label9

#line	75	' * ArrayAccess [75 : 7] : array=[ ArrayAccess [75 : 7] : array=[ [2, struct{ [2, struct{ int age (offset 0) }] employees (offset 0) }] acme ] index=[ int i ].employees ] index=[ int j ].age = int i + int j
ADDRESS-PLACEHOLDER
	pusha	0
	addi
	push	bp
	pushi	-2
	addi
	loadi
	push	bp
	pushi	-4
	addi
	loadi
	addi
	storei

#line	76	' * int j = int j + 1
	push	bp
	pushi	-4
	addi
	push	bp
	pushi	-4
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	label8
label9:

#line	78	' * int i = int i + 1
	push	bp
	pushi	-2
	addi
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	label6
label7:

#line	82	' * int i = 0
	push	bp
	pushi	-2
	addi
	pushi	0
	storei

#line	83	' * while (int i < 2)
	jmp	label10
	push	bp
	pushi	-2
	addi
	loadi
	pushi	2
	lti
	jz	label11

#line	84	' * int j = 0
	push	bp
	pushi	-4
	addi
	pushi	0
	storei

#line	85	' * while (int j < 2)
	jmp	label12
	push	bp
	pushi	-4
	addi
	loadi
	pushi	2
	lti
	jz	label13

#line	87	' * syntax.statements.Write@4e04a765
	' *  Write %sArrayAccess [87 : 13] : array=[ ArrayAccess [87 : 13] : array=[ [2, struct{ [2, struct{ int age (offset 0) }] employees (offset 0) }] acme ] index=[ int i ].employees ] index=[ int j ].age
VALUE-PLACEHOLDER
	outi
	' *  Write %s' '
	pushb	32
	outb

#line	88	' * int j = int j + 1
	push	bp
	pushi	-4
	addi
	push	bp
	pushi	-4
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	label12
label13:

#line	90	' * int i = int i + 1
	push	bp
	pushi	-2
	addi
	push	bp
	pushi	-2
	addi
	loadi
	pushi	1
	addi
	storei
	jmp	label10
label11:
	ret	0, 4, 0
